{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","images/image.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","CountryPicker","handleCountryChange","setCountries","fetchAPI","style","marginTop","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","src","cimage","alt","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.23ec39ff.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return <h3>Loading..</h3>;\n  }\n  return (\n    <div className=\"cards_container\">\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className=\"card infected\">\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">Number of active Cases</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">Number of recovery Cases</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Death\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">Number of death Cases</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\n      confirmed: confirmed.total,\n      deaths: deaths.total,\n      date,\n    }));\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport { fetchDailyData } from \"../../api\";\n\n// import styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.7)\",\n              \"rgba(0, 255, 0, 0.7)\",\n              \"rgba(255, 0, 0, 0.7)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  const lineChart = dailyData[0] ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.7)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className=\"chart_container\">{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <div className=\"countryPicker\" style={{ marginTop: \"1.5rem\" }}>\n      <p>Select Country : </p>\n      <FormControl className=\"countryPicker_formControl\">\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => handleCountryChange(e.target.value)}\n        >\n          <option value=\"\">Global</option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport \"./scss/style.scss\";\n\nimport { Cards, CountryPicker, Chart } from \"./components\";\nimport { fetchData } from \"./api/\";\nimport cimage from \"./images/image.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className=\"container\">\n        <img className=\"image\" src={cimage} alt=\"COVID-19\"></img>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Cards data={data} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}